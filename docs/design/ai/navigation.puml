@startuml

hide empty members

interface Graph<T> {
  T getNode(int index)
  List<Neighbor<T>> getNeighbors(int index)
  double getDistance(int from, int to)
}

interface CostCalculator<T> {
  double calculate(T node)
}

interface SearchAlgorithm<T,N> {
  Plan find(Graph<T> graph, int start, int goal)
}

class AStar<T,AStarNode>

class AStarNode {
  int index
  double costSoFar
  AStarNode previous
}

class Plan {
  double totalCost
  List<Integer> indices
}

class Neighbor<T> {
  int index
  T neighbor
  double distance
}

SearchAlgorithm <|-right- AStar
SearchAlgorithm *-- Graph
SearchAlgorithm -left- Plan

AStar *-- CostCalculator

AStar -- AStarNode

Graph *-- T : nodes
Graph -- Neighbor


@enduml